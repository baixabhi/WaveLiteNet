# -*- coding: utf-8 -*-
"""notebook45851be544.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AklI77Vx767J7cjiUGUbi4c7-WMLDW5O
"""

def training_WMobNetv2(model, train_loader, criterion, optimizer, device):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0

    pbar = tqdm(train_loader, desc='Training')
    for inputs, labels in pbar:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)

        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()
        pbar.set_postfix({'Loss': running_loss/len(train_loader),

                         'Acc': 100.*correct/total})

    return running_loss/len(train_loader), 100.*correct/total

#Validation
def validate(model, val_loader, criterion, device):
    model.eval()
    running_loss = 0.0
    correct = 0
    total = 0

    with torch.no_grad():
        for inputs, labels in tqdm(val_loader, desc='Validation'):
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)

            running_loss += loss.item()
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()
    return running_loss/len(val_loader), 100.*correct/total

import torch.nn.functional as F
from torch.optim import AdamW
from torch.optim.lr_scheduler import CosineAnnealingLR
import numpy as np
from tqdm import tqdm

def train_model(model, train_loader, val_loader, num_epochs=50):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model = model.to(device)

    # Loss
    criterion = nn.CrossEntropyLoss(label_smoothing=0.1)

    # AdamW
    optimizer = AdamW(model.parameters(), lr=0.001, weight_decay=0.01)

    # Cosine learning rate scheduler
    scheduler = CosineAnnealingLR(optimizer, T_max=num_epochs)

    best_val_acc = 0.0
    for epoch in range(num_epochs):
        print(f'\nEpoch {epoch+1}/{num_epochs}')

       # Training
        train_loss, train_acc = training_WMobNetv2(model, train_loader, criterion,

                                              optimizer, device)

        # Validation
        val_loss, val_acc = validate(model, val_loader, criterion, device)


        # Update lr
        scheduler.step()
        print(f'Train Loss: {train_loss:.4f} | Train Acc: {train_acc:.2f}%')
        print(f'Val Loss: {val_loss:.4f} | Val Acc: {val_acc:.2f}%')

        # Save best model
        if val_acc > best_val_acc:
            best_val_acc = val_acc
            torch.save(model.state_dict(), 'best_model.pth')
            print(f'Best model saved with validation accuracy: {best_val_acc:.2f}%')

#training
model = WMobNetv2(num_classes=4)
train_model(model, train_loader, val_loader)